#!perl

use strict;
use warnings;
use Benchmark::Class::Builder;

my $builder = Benchmark::Class::Builder->new;
$builder->parse_options(@ARGV);
$builder->run;

__END__

=head1 NAME

benchup - Run Benchmark Plan with Benchmark::Class

=head1 SYNOPSIS

  % benchup --planner=MyApp::Benchmark::Planner::SimpleGetPost
  % benchup --config=config/simple-get-post-1000.json
  {
    "planner": {
      "class": "MyApp::Benchmark::Plan::SimpleGetPost",
      "args": {
          "post": 1000,
          "get":  1000,
      },
    }
  }

  # ex. planner class
  package MyApp::Benchmark::Planner::SimpleGetPost {
      use parent 'Benchmark::Class::Planner';

      sub launch {
          my ($self, $c) = @_;
          # is ref($c), Benchmark::Class::Context;

          # your code here..

          my $task = MyApp::Benchmark::Task::GetEntry->new(
              get    => 1000,
              worker => 8,
          );
          $task->perform;
      }
  }

  % benchup --task=MyApp::Benchmark::Task::GetEntry --task=MyApp::Benchmark::Task::PostEntry
  % benchup --config=config/simple-get-post-1000.json
  {
    "tasks": [
        {
            "class": "MyApp::Benchmark::Task::GetEntry",
            "args": {
                "get": 1000,
                "worker": 8,
            },
        },
        {
            "class": "MyApp::Benchmark::Task::PostEntry",
            "args": {
                "post": 1000,
                "worker": 8,
            },
        },
    ],
  }

  # ex. task class
  package MyApp::Benchmark::Task::GetEntry {
      use parent 'Benchmark::Class::Task';

      # if $self->worker enabled, perform with prefork

      sub perform {
          my ($self, $c) = @_;
          # is ref($c), Benchmark::Class::Context;

          # your code here..
      }
  }

=head1 TODO

# http_agent with AnyEvent::HTTP or FurlX::Coro or mechanized Furl
# Role for task
# test
